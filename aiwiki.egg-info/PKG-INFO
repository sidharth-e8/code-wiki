Metadata-Version: 2.4
Name: aiwiki
Version: 1.0.0
Summary: Auto-generate a browsable, searchable technical wiki from your Django REST codebase using AI
Author: AI Wiki Team
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Framework :: Django
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: Django>=3.2
Requires-Dist: djangorestframework>=3.12
Requires-Dist: Flask>=2.0
Requires-Dist: markdown2>=2.4
Requires-Dist: requests>=2.25
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# 🤖 AI Wiki

Auto-generate a browsable, searchable technical wiki from your Django REST codebase using AI.

## ✨ Features

- 🔍 **Automatic Analysis**: Analyzes Django models, serializers, and views using introspection
- 📚 **Rich Documentation**: Generates comprehensive markdown documentation
- 🎨 **Visual Documentation**: Creates styled HTML documentation with icons, colors, and enhanced formatting
- 📊 **Visual Diagrams**: Creates Mermaid ERD diagrams showing model relationships
- 🌐 **Web Interface**: Beautiful, responsive dashboard with Tailwind CSS
- 💬 **AI Chat**: Ask questions about your codebase (integrates with hosted AI API)
- 📥 **Multiple Export Options**: Download documentation as markdown, HTML, or diagram files
- ⚡ **Hot Reload**: Real-time updates when serving documentation

## 🚀 Quick Start

### Installation

```bash
# Clone the repository
git clone <repository-url>
cd code-wiki

# Install dependencies
pip install -r requirements.txt

# Install the package
pip install -e .
```

### Usage

1. **Generate Documentation**

   ```bash
   aiwiki generate --target ./your-django-project --settings your_project.settings
   ```

2. **Serve Documentation**
   ```bash
   aiwiki serve
   ```
   This will start a web server at `http://localhost:8000` and automatically open your browser.

### Example with Demo Project

```bash
# Create an example Django project
python example_usage.py

# Follow the instructions printed to test AI Wiki
```

## 📋 CLI Commands

### `aiwiki generate`

Analyzes your Django project and generates documentation files.

```bash
aiwiki generate --target ./proj --settings proj.settings
```

**Options:**

- `--target`: Path to Django project directory (required)
- `--settings`: Django settings module, e.g., `myproject.settings` (required)

**Output:**

- `docs/project.md`: Comprehensive markdown documentation
- `docs/diagram.md`: Mermaid ERD diagram code
- `docs/project.html`: Styled HTML documentation with visual elements

### `aiwiki serve`

Starts the Flask web server to browse documentation.

```bash
aiwiki serve [--port 8000]
```

**Options:**

- `--port`: Port to run server on (default: 8000)

**Features:**

- 📖 Renders markdown documentation with syntax highlighting
- 🎨 Interactive Mermaid diagrams with pan/zoom
- 💬 AI chat interface for asking questions
- 📥 Download buttons for documentation files

## 🌐 Web Interface

The web dashboard provides:

### Documentation Viewer

- Clean, readable rendering of your Django project documentation
- Organized sections for models, serializers, and views
- Responsive design that works on all devices

### Interactive Diagrams

- Mermaid ERD diagrams showing model relationships
- Pan and zoom functionality
- Clear visualization of foreign keys and relationships

### AI Chat Integration

- Ask natural language questions about your codebase
- Sends documentation context to hosted AI API
- Real-time responses with toast notifications
- Chat history within the session

## 💬 Chat API Integration

The chat feature sends requests to a hosted API endpoint:

```json
POST https://yourdomain.com/api/chat
{
  "question": "Explain the payment flow logic",
  "docs": "<combined markdown + diagram text>"
}
```

**Configuration:**

- Update the `api_url` in `aiwiki/server.py`
- No OpenAI keys stored locally - all AI processing happens on your hosted API
- Falls back to mock responses when API is unavailable

## 🏗️ Architecture

```
aiwiki/
├── __init__.py          # Package initialization
├── cli.py              # Command-line interface
├── analyzer.py         # Django project analysis engine
├── generators.py       # Documentation and diagram generators
└── server.py           # Flask web server and HTML template
```

### Core Components

1. **DjangoAnalyzer**: Uses Django's introspection to extract model, serializer, and view information
2. **MarkdownGenerator**: Converts analysis data into comprehensive markdown documentation
3. **HTMLGenerator**: Creates styled HTML documentation with visual elements for enhanced readability
4. **MermaidGenerator**: Creates ERD diagrams from model relationships
5. **Flask Server**: Serves the web interface with chat integration

## 🔧 Technical Details

### Dependencies

- **Django**: For project analysis and introspection
- **Django REST Framework**: For serializer analysis
- **Flask**: Web server for documentation browser
- **markdown2**: Markdown processing
- **requests**: HTTP client for chat API integration

### Supported Django Features

- ✅ Models with all field types
- ✅ Foreign keys, one-to-one, and many-to-many relationships
- ✅ DRF serializers with Meta configurations
- ✅ Class-based and function-based views
- ✅ Custom model methods
- ✅ Docstrings and help text

## 🎯 Use Cases

- **API Documentation**: Generate comprehensive REST API documentation
- **Team Onboarding**: Help new developers understand project structure
- **Code Reviews**: Visual overview of model relationships and API endpoints
- **Architecture Planning**: Understand existing codebase before making changes
- **Knowledge Base**: Searchable documentation with AI-powered Q&A

## 🔮 Future Enhancements

- [ ] Support for Django admin customizations
- [ ] API endpoint documentation from URL patterns
- [ ] Integration with more AI providers
- [ ] Export to PDF/HTML formats
- [ ] Version control integration
- [ ] Custom template support
